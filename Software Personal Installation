BeyondCompare
Spotify
Chrome

GNU Midnight Commander – mc: 
>> brew install mc
>> mc
https://jonathansblog.co.uk/mc-for-mac-osx


Always connect to vpneng-i.fireeye.com and not fevpn.fireeeye.com

Local IP: ipconfig getifaddr en0
ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'

Local Mac:
10.23.54.216
10.10.133.245

SET check_license_expiry to False in Job_controller_config ALWAYS.
SET disable_ssl to True in etp_caps_config.json

Install Maven.
Adding local SSH to Github
Build Package/Jar: mvn package -DskipTests=true
Execute: java -jar target/JobController.jar -c /Users/piyush.bajaj/Downloads/FireEye/Code/caps/deployment/ -e dev

which psql
ps aux | grep postgres
ps -f -u postgres : should list postgres processes

sudo -u postgres /usr/pgsql-9.5/bin/postgres -D /var/lib/pgsql/9.5/data
systemctl status postgresql-9.5.service
Just did: systemctl status
postgresql-9.5.service - PostgreSQL 9.5 database server
Loaded: loaded (/usr/lib/systemd/system/postgresql-9.5.service; enabled)
├─26873 /usr/pgsql-9.5/bin/postgres -D /var/lib/pgsql/9.5/data

Configuring postgresql.conf : /var/lib/pgsql/9.5/data/postgresql.conf

This should list the PostgreSQL processes in your environment: sudo lsof -n -u postgres |grep LISTEN or sudo netstat -ltnp | grep postgres

If is configured to listen and handle request in port 5432: cat /etc/services | grep 5432
Check whether the service is active or not : service postgresql status
Checking whether a specific port assigned for service relates to PostgreSQL Database Server is actively listening or not by executing the following command : netstat -tulpn | grep 5432
Run Postgres DB terminal: sudo -u postgres psql

git push
git pull
git push -u origin feature_branch_name

To start Tomcat server: ./catalina.sh start
To check if Tomcat is running: ps -ef | grep tomcat
Test the link: wget -p https://10.14.27.47:8080

redis-server redis-3.2.8/redis.conf

yum install epel-release -y
yum install aria2 -y


minikube start
kubectl get nodes

docker --version           
docker-compose --version       
docker-machine --version     
minikube version     
kubectl version --client   

 git push origin --delete PROV-001

-Cloud Services and Architecture
- Common SaaS offering to Automatically Provisioning/De-Provisioning of Fireeye customers in AWS as a part of on-boarding Service

+ Common Cloud – Cloud Application Provisioning Services (CAPS)
➢ Created an internal web service that auto-provisions resources to fulfill customer enrollment
➢ Implemented a priority job queue with a Redis-cluster and a scalable array of provisioning servers
➢ Automated email communication for customers that includes welcome, password, and account-change emails.

Tech Stack: Java, Redis, PostgreSQL, Salesforce SOQL, Maven, JUnit , Git, AWS

engrefund@koreanair.com

Application for Employment Authorization, Receipt Number YSC1990211447

Sync a branch with master: 
git checkout master
git pull
git checkout mobiledevicesupport
git merge master


